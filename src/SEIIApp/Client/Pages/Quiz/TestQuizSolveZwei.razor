@page "/TestQuizSolveZwei/{QuizId:int}"

@inject Services.QuizDefinitionBackendAccessService QuizDefinitionService

@inject IJSRuntime JSRuntime

<h3>Quiz Definitions Editor</h3>

@if (QuizDefinitionDto != null)
{

    <EditForm EditContext="@context" OnSubmit="OnSubmit">
        <ObjectGraphDataAnnotationsValidator />

        <label>Quiz Name</label>

        @foreach (var question in QuizDefinitionDto.Questions)
        {
            <div>@question.QuestionText</div>
            @foreach (var answer in question.Answers)
            {
                ConcreteAnswerDto adto = new ConcreteAnswerDto();
                adto.ReferencesTo = answer;
                Answers.Add(adto);

                
                <InputCheckbox @bind-Value="adto.SelectedAnswer"><div>@(answer.AnswerText)</div></InputCheckbox>
                


            }
        }
        <p>Right: @correctAnswers</p>
        <p>False: @falseAnswers</p>
        <p>counterAuswerten: @counter</p>
        <button class="btn btn-light btn-sm" @onclick="Auswerten">Auswerten</button>
        <ValidationSummary />
    </EditForm>


}
else
{
    <h5>Quiz definition in loading (or not found) ...</h5>
}

@code {
    int counterTest = 0;

    [Parameter]
    public int QuizId { get; set; }

    public QuizDefinitionDto QuizDefinitionDto { get; set; }

    private EditContext context { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (QuizId != 0)
        {
            var existingQuiz = await QuizDefinitionService.GetQuizById(QuizId);
            PrepareEditOrAddOfQuizDefinition(existingQuiz);
        }
        else
        {
            PrepareEditOrAddOfQuizDefinition(new QuizDefinitionDto());
        }
        await base.OnParametersSetAsync();
        TestQuizDto testQuizDto = new TestQuizDto();
        testQuizDto.QuizDefinitionDto = this.QuizDefinitionDto;
        testQuizDto.Answers = this.Answers;

        context = new EditContext(testQuizDto);
    }

    private void PrepareEditOrAddOfQuizDefinition(QuizDefinitionDto q)
    {
        if (q.Questions == null) q.Questions = Array.Empty<QuestionDefinitionDto>();
        this.QuizDefinitionDto = q;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();


    }

    public class TestQuizDto
    {
        public QuizDefinitionDto QuizDefinitionDto { get; set; }
        public List<ConcreteAnswerDto> Answers { get; set; }

    }


    private void OnSubmit(EditContext context)
    {

    }

    [Parameter]
    public List<ConcreteAnswerDto> Answers { get; set; } = new List<ConcreteAnswerDto>();





    AnswerDefinitionDto AnswerDefinitionDto { get; set; }

    int correctAnswers = 0;
    int falseAnswers = 0;
    int counter = 0;

    async void Auswerten()
    {
        bool test = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you?");
        correctAnswers = 0;
        falseAnswers = 0;
        counter = 0;
        foreach (var question in QuizDefinitionDto.Questions)
        {
            foreach (var answer in question.Answers)
            {
                ConcreteAnswerDto concrete = new ConcreteAnswerDto();
                concrete.ReferencesTo = answer;


                if (concrete.SelectedAnswer == true && answer.IsCorrectAnswer == true)
                {
                    correctAnswers++;
                    counter++;
                }
                else if (concrete.SelectedAnswer == false && answer.IsCorrectAnswer == false)
                {
                    correctAnswers++;
                    counter++;
                }
                else
                {
                    falseAnswers++;
                    counter++;
                }



            }
        }
    }
}


