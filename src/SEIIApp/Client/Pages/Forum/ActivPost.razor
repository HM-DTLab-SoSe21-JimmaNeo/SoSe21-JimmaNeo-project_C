@page "/post/activpost"
@page "/post/activpost/{Category}"


@inject NavigationManager NavigationManager
@inject SEIIApp.Client.Services.PostServiceAccess PostServiceAccess
@using SEIIApp.Shared;

<div id="navigation">
    <a href="ForumMainPage">Forum</a>
    <a href="post">Posts</a>
    <a href="TopFive">Top5</a>
    <a href="Upload">Top5</a>
</div>

<h1>@Category</h1>
<p>Current Category: @Category</p>

@if (posts == null)
{
    <p>there are no Current Posts in this Category Category: @Category</p>
}

@if (posts != null)
{
    @foreach (PostDto post in posts)
    {
        <div class="row justify-content-center m-3">
            <div class="col-sm-8">
                <div class="card">
                    <div class="card-header">
                        <h1>@post.Title</h1>
                    </div>
                    <div class="card-body text-center">
                        <a type="text">@post.Content</a>
                    </div>
                    <div class="card-footer text-center">
                        <a>Upload Date: @post.UploadDate</a>
                        <a>Comments: @post.CommentCounter</a>
                        <a>Likes: @post.Likes</a>
                        <button @onclick="@(e => incrementLike(@post))">Like</button>

                        <div id="navigation">
                            <a href="/post/viewPost/@post.PostId">View Post</a>
                        </div>

                    </div>

                </div>
            </div>
        </div>  
    }
}

@code {


    [Parameter]
    public String Category { get; set; }

    [Parameter]
    public int postId { get; set; }

    public PostDto[] posts { get; set; }

    public PostDto activPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Category == null)
        {
            selectPost();
        }
        var ps = await PostServiceAccess.GetAllPosts();
        posts = ps.Where(p => p.Category == Category).ToArray();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var ps = await PostServiceAccess.GetAllPosts();
        posts = ps.Where(p => p.Category == Category).ToArray();
    }


    public void selectPost()
    {
        activPost = posts.Where(post => post.PostId == postId).FirstOrDefault();
    }

    // top Five oder als Parameter für einen Kiurs ind er route übergeben / bzw. die ID
    async public void incrementLike(PostDto post)
    {
        post.Likes++;
        post = await PostServiceAccess.Save(post);

    }


}
