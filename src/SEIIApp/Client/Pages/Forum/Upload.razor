@page "/upload"

@using SEIIApp.Shared
@inject IJSRuntime jsRunTime
@inject NavigationManager NavigationManager
@inject SEIIApp.Client.Services.PostServiceAccess PostServiceAccess


<style>
    #navigation a {
        padding: 8px;
    }
</style>

<div id="navigation">
    <a href="ForumMainPage">Forum</a>
    <a href="post">Posts</a>
    <a href="TopFive">Top5</a>
    <a href="Upload">Upload</a>
    <h1>Your Uploads</h1>
</div>

<div style="float:left;margin-right:5px;">
    <label>Title</label>
    <input type="text" @bind="@currentPost.Title" />
    <label>Category</label>
    <input type="text" @bind="@currentPost.Category" />
 
</div>

<button class="btn btn-success" style="float:left;margin-right:5px;" @onclick="SavePost">Save</button>
<button class="btn btn-primary" style="float:left;" @onclick="AddNew">Add New</button>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Upload Date</th>
        </tr>
    </thead>
</table>
<div>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th>UploadDate</th>
                <th>Category</th>
                <th>Content</th>
                <th>Option</th>
                <th>Attachment</th>
            </tr>
        </thead>
        <tbody>
            

            @if (posts != null)
            {
             
                @foreach (PostDto post in posts)
                {
                <tr>
                <td>@post.Title</td>
                <td>@post.UploadDate</td>
                <td>@post.Category</td>
                <td>
                    <div id="navigation">
                        <a href="/ContentDefinition/@post.PostId">Content </a>
                    </div>
                </td>

                <td>
                    <button class="btn btn-danger" @onclick="@(e => DeletePost(@post.PostId))">Delete Post</button>
                </td>
                <td>Attachment</td>

            </tr>
                }
            }
        </tbody>
    </table>

</div>

@code {


    public PostDto[] posts { get; set; }

    public PostDto currentPost = new PostDto();

    // Sollte requestet werden von DB Temp var
    public int currentuserId = 12;

    protected override async Task OnInitializedAsync()
    {
        await base.OnParametersSetAsync();
        var ps = await PostServiceAccess.GetAllPosts();
        posts = ps.Where(post => post.UserId == currentuserId).ToArray();
    }

    private  void AddNew()
    {
        currentPost = new PostDto();
    }

    private async void SavePost()
    {

        if (currentPost != null)
        {
            currentPost.UserId = currentuserId;
            currentPost.UploadDate = DateTime.Now;
            currentPost.PostId = PostDto.inkrementPostId++;
            await PostServiceAccess.Save(currentPost);
            AddNew();
            GetAllMyPosts();

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        GetAllMyPosts();

    }

    private async void GetAllMyPosts()
    {

        var ps = await PostServiceAccess.GetAllPosts();
        posts = ps.Where(post => post.UserId == currentuserId).ToArray();
    }

    private async void DeletePost(int postId)
    {
        PostServiceAccess.DeletePost(postId);
        var ps = await PostServiceAccess.GetAllPosts();
        posts = ps.Where(post => post.UserId == currentuserId).ToArray();
    }

}



